// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Team {
    id                           String                         @id @default(cuid())
    createdAt                    DateTime                       @default(now())
    updatedAt                    DateTime                       @updatedAt
    name                         String
    description                  String?
    location                     String?
    joinRequest                  JoinRequest[]
    teamBalance                  TeamBalance[]
    teamMember                   TeamMember[]
    punishmentOrContributionType PunishmentOrContributionType[]
    role                         Role[]
    AppointmentDays              Appointment[]
    AppointmentParticipation     AppointmentParticipation[]
}

model TeamMember {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    clerkId   String
    teamId    String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([clerkId, teamId])
}

model Role {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String

    @@unique([clerkId, teamId, name])
}

model Appointment {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    canceled  Boolean   @default(false)
    date      DateTime?
    time      String
    type      String
    team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
}

model AppointmentParticipation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    clerkId   String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    status    String
}

model JoinRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String
}

model PunishmentOrContributionType {
    id          String @id @default(cuid())
    name        String
    description String
    price       Float?
    team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId      String
}

model TeamBalance {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String
    entryType   String
    dueDate     DateTime @default(now())
    price       Float?
    team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId      String
    clerkId     String?
    sponsorName String?
    payed       Boolean  @default(false)
}
