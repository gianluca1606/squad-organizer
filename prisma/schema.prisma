// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Team {
    id                           String                         @id @default(cuid())
    createdAt                    DateTime                       @default(now())
    updatedAt                    DateTime                       @updatedAt
    name                         String
    description                  String?
    location                     String?
    manager                      TeamManager[]
    joinRequest                  JoinRequest[]
    punishmentAndContribution    PunishmentAndContribution[]
    teamBalance                  TeamBalance[]
    teamMember                   TeamMember[]
    punishmentOrContributionType PunishmentOrContributionType[]
}

model TeamMember {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    clerkId   String
    teamId    String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamManager {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String
}

model JoinRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String
}

model PunishmentAndContribution {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    dueDate   DateTime
    name      String
    type      String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String
    payed     Boolean  @default(false)
}

model Sponsor {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String
    price       Float?
}

model PunishmentOrContributionType {
    id          String @id @default(cuid())
    name        String
    description String
    price       Float?
    team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId      String
}

model TeamBalance {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    type      String
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    clerkId   String
    payed     Boolean  @default(false)
}
